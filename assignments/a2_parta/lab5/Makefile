
###########################################################################
# COSC1076 - Advanced Programming Techniques                              #
# Assessed lab 1 - debugging                                              #
# Created by Paul Miller                                                  #
#                                                                         #
# Makefile for the assessed lab. Simply type 'make' (no quotes) to compile#
# this project.                                                           #
###########################################################################

# The headers included as part of this project
HEADERS=fsupport.h main.h alternate.h

# The object files created as part of compilation
OBJECTS=fsupport.o main.o alternate.o

#the default compiler to use
CC=gcc

# The compiler flags used to compile the program
CFLAGS=-ansi -Wall -pedantic 

# The linker flags used by this program by default. Notice that this 
# starts off empty and is added to by some special targets
LFLAGS=

# The name of the executable program generated by this code
EXE=alternate

# The default target (as it's the first). Just make the executable
all:$(EXE)

# The target that makes the linked executable. This requires that the 
# object files for each .c file have already been made.
$(EXE): $(OBJECTS)
	$(CC) $(LFLAGS) $^ -o $@

# The target that makes each source file: The source files need to have the
# same name but different extension (foo.o is made from foo.c) 
%.o:%.c $(HEADERS)
	$(CC) $(CFLAGS) -c $<

# the debug target - if you type make debug, you will recompile your program,
# building in the debugging symbols for use with gdb and valgrind
debug:CFLAGS+=-g -DDEBUG
debug:clean all

# this target does everything that the "debug" target above does. It also 
# compiles/links in the address sanitization library. This is a "memory 
# hardening" library that enforces strict accessing of memory addresses. 
# Any attempt to access an invalid memory address will crash your program, 
# outputting a stacktrace and additional information about the memory access
# before the crash.
sanitize:CFLAGS+=-g -DDEBUG -fsanitize=address 
sanitize:LFLAGS+=-fsanitize=address
sanitize:clean all 

# The clean target deletes all files created as part of compilation and 
# linking. It's a 'phony' target in the sense that it doesn't create a 
# file called "clean" and by specifying this we avoid an unnecessary check
# on modificatin times when we call the 'clean' target.
.PHONY:clean
clean:
	rm -f $(EXE) *.o *~

