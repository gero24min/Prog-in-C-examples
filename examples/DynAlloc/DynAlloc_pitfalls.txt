Useful tips :
===========

1) The size of the structure is necessarily NOT the sum of the sizes of all 
   the member variables of the structure. There may be some padding to align
   the bytes allocated according to the rules of the architecture.

2) Use the sizeof operator to determine the size of any structure or data type. 

3) Always check the return value of malloc(), calloc() or realloc() and 
   take necessary action if a NULL value is returned. A NULL value normally 
   indicates that there is not a contiguous (next to each other) segment of
   memory available to meet the request that has been made.

4) Always free the memory that is requested dynamically (by malloc()/calloc()).
   If you do not do this and you may end up exhausting your systems memory.
   This is particularly the case if you are requesting more memory as you 
   go along. In other words, at the end of your program, for every call to 
   malloc() or calloc() should have a corresponding call to free().

5) You could use the 'valgrind' utility to ascertain if your program is 
   giving 'memory leaks' (ie. if you have not freed to the dynamically 
   allocated memory blocks). A simple usage on the Unix systems would be :

      ./valgrind --leak-check=full --show-reachable=yes ./executable

   where ./executable is the name of the executable binary produced by 
   compilation. 

   Please play close attention to the output from valgrind. Often there is
   a problem that you are looking for that valgrind has told you about but
   you have overlooked some of the output because you thought it was not 
   important.

6) One of the very common mistakes while dealing with the dynamic allocated 
   memory blocks is referring to the memory location that has been freed. 
   What is the problem with the code snippet below :
   
   void FreeAttempt(Person *pList) {
      /* For 'Person', refer to the definition provided in personList.c */

             /*A*/               /*C*/
	       |                   |
	      \|/                 \|/
      for( ; pList != NULL; pList = pList->nextPerson ) {
         free(pList);   <-- /*B*/
      }
   }

   The above is a very common mistake. In the code above an attempt to read
   'pList' (C) is made after the pList was freed (B).
   A more correct way to free the complete list is shown in destroyList()
   function of personList.c.

