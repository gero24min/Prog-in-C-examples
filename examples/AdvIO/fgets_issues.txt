Compile and execute the fgets_1.c code. Enter the following input :
  Hello

the output should be :
  The length of the text (Hello
  ) entered is 6

Please note that the output above, goes to the newline without a '\n' in the
printf() statement. Such an output is because of the fact that fgets() 
accepted the newline character and stored it into the array. the user 
entered :
  Hello\n

When the user enters the 'enter' key (to indicate completion of entry), it 
gets stored into the array (text) before terminating it with a nul 
character. As a result of the above the ouput goes to the newline, since 
the last character is a '\n' (newline) character. 

To prove this point further, the strlen() of the
array (text) gives an output of 6 for an input of 5 characters 
('H' 'e' 'l' 'l' and 'o'), not counting the newline - which of course is 
part of the input.

Because of the above, it is a very good idea to replace the newline 
character with a null character. As done in fgets_2.c. In fact if you do
not do that, your program will display non-standard behaviour, which is
never a good thing.

On compiling and executing the fgets_2.c, you will not notice that the 
output no more goes to the newline. The else{} block in the fgets_2.c could
be helpful in trying to build a robust code and output correct error 
messages.

